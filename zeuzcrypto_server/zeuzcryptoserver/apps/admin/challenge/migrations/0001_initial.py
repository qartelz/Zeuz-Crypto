# Generated by Django 4.2.23 on 2025-10-22 05:34

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ChallengeProgram",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("BEGINNER", "Beginner"),
                            ("INTERMEDIATE", "Intermediate"),
                            ("ADVANCED", "Advanced"),
                        ],
                        default="BEGINNER",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "challenge_programs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("TRADE_COUNT", "Trade Count"),
                            ("PORTFOLIO_BALANCE", "Portfolio Balance"),
                            ("PROFIT_TARGET", "Profit Target"),
                            ("HOLDING_PERIOD", "Holding Period"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_value",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                ("is_mandatory", models.BooleanField(default=True)),
                ("order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "challenge_tasks",
                "ordering": ["week", "order"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeTrade",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("asset_symbol", models.CharField(max_length=20)),
                ("asset_name", models.CharField(blank=True, max_length=100)),
                (
                    "trade_type",
                    models.CharField(
                        choices=[
                            ("SPOT", "Spot"),
                            ("FUTURES", "Futures"),
                            ("OPTIONS", "Options"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")], max_length=4
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("CLOSED", "Closed"),
                            ("PARTIALLY_CLOSED", "Partially Closed"),
                        ],
                        default="OPEN",
                        max_length=20,
                    ),
                ),
                ("holding_type", models.CharField(default="INTRADAY", max_length=10)),
                (
                    "total_quantity",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "remaining_quantity",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "average_entry_price",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "current_price",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "total_invested",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "realized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "unrealized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "allocation_percentage",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                ("opened_at", models.DateTimeField(auto_now_add=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "challenge_trades",
            },
        ),
        migrations.CreateModel(
            name="ChallengeWallet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "initial_balance",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("10000.00"), max_digits=15
                    ),
                ),
                (
                    "available_balance",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("10000.00"), max_digits=15
                    ),
                ),
                (
                    "locked_balance",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "earned_balance",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "challenge_wallets",
            },
        ),
        migrations.CreateModel(
            name="ChallengeWeek",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("learning_outcome", models.TextField()),
                ("week_number", models.PositiveIntegerField()),
                (
                    "trading_type",
                    models.CharField(
                        choices=[
                            ("SPOT", "Spot Trading Only"),
                            ("SPOT_FUTURES", "Spot + Futures"),
                            ("SPOT_FUTURES_OPTIONS", "Spot + Futures + Options"),
                            ("PORTFOLIO", "Portfolio Performance Focus"),
                        ],
                        max_length=30,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("target_goal", models.DecimalField(decimal_places=2, max_digits=10)),
                ("min_trades_required", models.PositiveIntegerField(default=5)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weeks",
                        to="challenge.challengeprogram",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_weeks",
                "ordering": ["program", "week_number"],
            },
        ),
        migrations.CreateModel(
            name="UserChallengeParticipation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("ABANDONED", "Abandoned"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "starting_balance",
                    models.DecimalField(
                        decimal_places=8, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "current_balance",
                    models.DecimalField(
                        decimal_places=8, default=Decimal("0"), max_digits=20
                    ),
                ),
                ("total_trades", models.PositiveIntegerField(default=0)),
                ("spot_trades", models.PositiveIntegerField(default=0)),
                ("futures_trades", models.PositiveIntegerField(default=0)),
                ("options_trades", models.PositiveIntegerField(default=0)),
                (
                    "portfolio_return_pct",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=10
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "week",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="challenge.challengeweek",
                    ),
                ),
            ],
            options={
                "db_table": "user_challenge_participations",
            },
        ),
        migrations.CreateModel(
            name="ChallengeWalletTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("INITIAL_DEPOSIT", "Initial Deposit"),
                            ("TRADE_LOCK", "Trade Lock"),
                            ("TRADE_UNLOCK", "Trade Unlock"),
                            ("PROFIT_ADD", "Profit Added"),
                            ("LOSS_DEDUCT", "Loss Deducted"),
                            ("REWARD_BONUS", "Reward Bonus"),
                            ("RESET", "Wallet Reset"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "balance_before",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("balance_after", models.DecimalField(decimal_places=2, max_digits=15)),
                ("description", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "trade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="challenge.challengetrade",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="challenge.challengewallet",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_wallet_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="challengewallet",
            name="participation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="wallet",
                to="challenge.userchallengeparticipation",
            ),
        ),
        migrations.AddField(
            model_name="challengewallet",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="challenge_wallets",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ChallengeTradeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("BUY", "Buy"),
                            ("SELL", "Sell"),
                            ("PARTIAL_SELL", "Partial Sell"),
                            ("CANCEL", "Cancel"),
                            ("MODIFY", "Modify"),
                        ],
                        max_length=15,
                    ),
                ),
                ("order_type", models.CharField(default="MARKET", max_length=15)),
                ("quantity", models.DecimalField(decimal_places=8, max_digits=20)),
                ("price", models.DecimalField(decimal_places=8, max_digits=20)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=20)),
                (
                    "realized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "trade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="challenge.challengetrade",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "challenge_trade_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeTradeAnalytics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("total_trades", models.PositiveIntegerField(default=0)),
                ("open_trades", models.PositiveIntegerField(default=0)),
                ("closed_trades", models.PositiveIntegerField(default=0)),
                ("profitable_trades", models.PositiveIntegerField(default=0)),
                ("losing_trades", models.PositiveIntegerField(default=0)),
                (
                    "total_realized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "total_unrealized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "total_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "win_rate",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "profit_factor",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=10
                    ),
                ),
                ("spot_trades_count", models.PositiveIntegerField(default=0)),
                ("futures_trades_count", models.PositiveIntegerField(default=0)),
                ("options_trades_count", models.PositiveIntegerField(default=0)),
                ("avg_holding_time", models.DurationField(blank=True, null=True)),
                ("longest_trade", models.DurationField(blank=True, null=True)),
                ("shortest_trade", models.DurationField(blank=True, null=True)),
                (
                    "total_capital_deployed",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "avg_allocation_per_trade",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "best_trade_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                (
                    "worst_trade_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=20
                    ),
                ),
                ("last_calculated_at", models.DateTimeField(auto_now=True)),
                (
                    "participation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trade_analytics",
                        to="challenge.userchallengeparticipation",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_trade_analytics",
            },
        ),
        migrations.AddField(
            model_name="challengetrade",
            name="participation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="trades",
                to="challenge.userchallengeparticipation",
            ),
        ),
        migrations.AddField(
            model_name="challengetrade",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="challenge_trades",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="challengetrade",
            name="wallet",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="trades",
                to="challenge.challengewallet",
            ),
        ),
        migrations.CreateModel(
            name="ChallengeTaskCompletion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_completed", models.BooleanField(default=False)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                (
                    "actual_value",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_completions",
                        to="challenge.userchallengeparticipation",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completions",
                        to="challenge.challengetask",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_task_completions",
            },
        ),
        migrations.AddField(
            model_name="challengetask",
            name="week",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="challenge.challengeweek",
            ),
        ),
        migrations.CreateModel(
            name="ChallengeStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("total_enrollments", models.PositiveIntegerField(default=0)),
                ("completions", models.PositiveIntegerField(default=0)),
                ("abandonments", models.PositiveIntegerField(default=0)),
                (
                    "completion_rate",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "avg_portfolio_return",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=10
                    ),
                ),
                (
                    "avg_total_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "avg_trades_per_user",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=10
                    ),
                ),
                ("disciplined_traders", models.PositiveIntegerField(default=0)),
                ("balanced_traders", models.PositiveIntegerField(default=0)),
                ("aggressive_traders", models.PositiveIntegerField(default=0)),
                ("reckless_traders", models.PositiveIntegerField(default=0)),
                ("total_coins_distributed", models.BigIntegerField(default=0)),
                ("badges_awarded", models.PositiveIntegerField(default=0)),
                ("calculated_at", models.DateTimeField(auto_now=True)),
                (
                    "week",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="challenge.challengeweek",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_statistics",
            },
        ),
        migrations.CreateModel(
            name="ChallengeScore",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "pnl_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "money_management_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "capital_allocation_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "total_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=5
                    ),
                ),
                (
                    "behavioral_tag",
                    models.CharField(
                        choices=[
                            ("DISCIPLINED", "Disciplined Trader"),
                            ("BALANCED", "Balanced Trader"),
                            ("AGGRESSIVE", "Aggressive Trader"),
                            ("RECKLESS", "Reckless Trader"),
                        ],
                        default="BALANCED",
                        max_length=30,
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now=True)),
                (
                    "participation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score",
                        to="challenge.userchallengeparticipation",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_scores",
            },
        ),
        migrations.CreateModel(
            name="ChallengeRewardDistribution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reward_type",
                    models.CharField(
                        choices=[
                            ("COMPLETION_BONUS", "Completion Bonus"),
                            ("PROFIT_BONUS", "Profit Bonus"),
                            ("LEADERBOARD_PRIZE", "Leaderboard Prize"),
                        ],
                        max_length=20,
                    ),
                ),
                ("coin_amount", models.DecimalField(decimal_places=2, max_digits=15)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenge.userchallengeparticipation",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_challenge_rewards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_reward_distributions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "challenge_reward_distributions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeReward",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("badge_name", models.CharField(max_length=100)),
                ("badge_description", models.TextField(blank=True)),
                ("badge_icon", models.URLField(blank=True, null=True)),
                ("profit_bonus_coins", models.PositiveIntegerField(default=25000)),
                ("loss_recovery_coins", models.PositiveIntegerField(default=10000)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "week",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_template",
                        to="challenge.challengeweek",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_rewards",
            },
        ),
        migrations.CreateModel(
            name="ChallengeOptionsDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option_type",
                    models.CharField(
                        choices=[("CALL", "Call"), ("PUT", "Put")], max_length=4
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[("LONG", "Long"), ("SHORT", "Short")], max_length=5
                    ),
                ),
                ("strike_price", models.DecimalField(decimal_places=8, max_digits=20)),
                ("expiry_date", models.DateField()),
                ("premium", models.DecimalField(decimal_places=8, max_digits=20)),
                (
                    "trade",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options_details",
                        to="challenge.challengetrade",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_options_details",
            },
        ),
        migrations.CreateModel(
            name="ChallengeLeaderboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("rank", models.IntegerField()),
                ("total_score", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "portfolio_return_pct",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("total_trades", models.IntegerField()),
                ("win_rate", models.DecimalField(decimal_places=2, max_digits=5)),
                ("behavioral_tag", models.CharField(max_length=50)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenge.userchallengeparticipation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "week",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaderboard_entries",
                        to="challenge.challengeweek",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_leaderboard",
                "ordering": ["rank"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeFuturesDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "leverage",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("1"), max_digits=5
                    ),
                ),
                (
                    "margin_required",
                    models.DecimalField(
                        decimal_places=8, default=Decimal("0"), max_digits=20
                    ),
                ),
                ("expiry_date", models.DateField()),
                (
                    "contract_size",
                    models.DecimalField(
                        decimal_places=8, default=Decimal("1"), max_digits=20
                    ),
                ),
                (
                    "trade",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="futures_details",
                        to="challenge.challengetrade",
                    ),
                ),
            ],
            options={
                "db_table": "challenge_futures_details",
            },
        ),
        migrations.CreateModel(
            name="UserChallengeReward",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("badge_earned", models.BooleanField(default=False)),
                ("coins_earned", models.PositiveIntegerField(default=0)),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                ("claimed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="earned_rewards",
                        to="challenge.userchallengeparticipation",
                    ),
                ),
                (
                    "reward_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenge.challengereward",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_rewards_earned",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_challenge_rewards",
                "indexes": [
                    models.Index(
                        fields=["user", "earned_at"],
                        name="user_challe_user_id_c8404d_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="userchallengeparticipation",
            index=models.Index(
                fields=["user", "week"], name="user_challe_user_id_baf1c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userchallengeparticipation",
            index=models.Index(
                fields=["status", "week"], name="user_challe_status_ab2fb0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userchallengeparticipation",
            unique_together={("user", "week")},
        ),
        migrations.AddIndex(
            model_name="challengeweek",
            index=models.Index(
                fields=["program", "week_number"], name="challenge_w_program_32b7dc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengeweek",
            index=models.Index(
                fields=["start_date", "end_date"], name="challenge_w_start_d_5f3d91_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="challengeweek",
            unique_together={("program", "week_number")},
        ),
        migrations.AddIndex(
            model_name="challengewallettransaction",
            index=models.Index(
                fields=["wallet", "created_at"], name="challenge_w_wallet__042f2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengewallettransaction",
            index=models.Index(
                fields=["transaction_type", "created_at"],
                name="challenge_w_transac_0fb834_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="challengewallet",
            index=models.Index(
                fields=["user", "participation"], name="challenge_w_user_id_093e59_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengewallet",
            index=models.Index(
                fields=["user", "is_active"], name="challenge_w_user_id_33faf3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="challengewallet",
            unique_together={("user", "participation")},
        ),
        migrations.AddIndex(
            model_name="challengetradehistory",
            index=models.Index(
                fields=["trade", "created_at"], name="challenge_t_trade_i_2844f8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengetradehistory",
            index=models.Index(
                fields=["user", "created_at"], name="challenge_t_user_id_fdd10c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengetrade",
            index=models.Index(
                fields=["user", "status"], name="challenge_t_user_id_60447b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengetrade",
            index=models.Index(
                fields=["participation", "status"],
                name="challenge_t_partici_c38ab5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="challengetrade",
            index=models.Index(
                fields=["asset_symbol", "trade_type"],
                name="challenge_t_asset_s_e0d153_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="challengetaskcompletion",
            index=models.Index(
                fields=["participation", "task"], name="challenge_t_partici_edb372_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="challengetaskcompletion",
            unique_together={("participation", "task")},
        ),
        migrations.AddIndex(
            model_name="challengerewarddistribution",
            index=models.Index(
                fields=["user", "status"], name="challenge_r_user_id_fa28cd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengerewarddistribution",
            index=models.Index(
                fields=["status", "created_at"], name="challenge_r_status_c41e33_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="challengeleaderboard",
            index=models.Index(
                fields=["week", "rank"], name="challenge_l_week_id_f61d8a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="challengeleaderboard",
            unique_together={("week", "participation")},
        ),
    ]
